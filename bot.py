from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import types
from functions_app.steam_funck import *
import logging
import configparser
from keyboard import *
import functions_app.main_func as main_func
import db
import sys_const

config = configparser.ConfigParser()
config.read(sys_const.settings, encoding="utf-8")
token = config["bot"]["token"]
telephone = config["bot"]["telephone"]
percent = float(config['bot']['percent'])
min_replenishment = float(config['bot']['min_replenishment'])
max_replenishment = float(config['bot']['max_replenishment'])
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class Steam(StatesGroup):
    waiting_for_rulle = State()
    waiting_for_login = State()
    waiting_for_rub = State()
    waiting_for_pay = State()
    waiting_for_save = State()

@dp.message_handler(commands='start')
async def start_message(message : types.Message):
    if data_baz.chek(id=message.from_user.id, param='rulle') is None:
        data_baz.register_new_user(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–∏–º\n–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –±–µ—Ç–∞ –≤–µ—Äc–∏—è.",
     reply_markup=generator_keyboards(menu_keyboards))
    
@dp.message_handler(text ='üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def pay_steam(message : types.Message):
    if data_baz.chek(id=message.from_user.id, param='rulle')[0] == 0:
        await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∞—è –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º: \n1.–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ RU –∞–∫–∞—É–Ω—Ç–æ–≤ \n2.–í—ã –¥–æ —ç—Ç–æ–≥–æ —É–∂–µ –ø–æ–ø–æ–ª–Ω—è–ª–∏ –∞–∫–∫–∞—É–Ω—Ç\n3.–õ–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏, –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=generator_keyboards('‚úÖ'))
        await Steam.waiting_for_rulle.set()
    else:
        if data_baz.chek(id=message.from_user.id, param='login_steam')[0] != 0:
            keyboard = [data_baz.chek(id=message.from_user.id, param='login_steam')[0]]
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω steam:", reply_markup=generator_keyboards(keyboard))
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω steam:", reply_markup=types.ReplyKeyboardRemove())
        await Steam.waiting_for_login.set()

@dp.message_handler(state=Steam.waiting_for_rulle)
async def rulle(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ':
        data_baz.update_rulle(message.from_user.id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω steam:", reply_markup=types.ReplyKeyboardRemove())
        await Steam.next()
    else:
        await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –ø—Ä–∏–º–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ!')

@dp.message_handler(state=Steam.waiting_for_login)
async def login(message: types.Message, state: FSMContext):
        login = message.text
        inquiry = check_steam(login)
        await state.update_data(login = login)
        match inquiry:
            case True:
                await message.answer(f'‚ö†Ô∏è–¢–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=types.ReplyKeyboardRemove())
            case False:
                await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (—Å—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –≤–∞–º–∏ –±—É–¥–µ—Ç –ú–ï–ù–¨–®–ï –∏–∑-–∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏):\
                    \n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ {min_replenishment} —Ä—É–±–ª–µ–π, –º–∞–∫—Å–∏–º—É–º - {max_replenishment}!\n', reply_markup=generator_keyboards(['–û—Ç–º–µ–Ω–∞']))
                await Steam.next()
            case 'no_info':
                await message.answer(f'–ù–µ—Ç —Å–≤—è–∑–∏ —Å–æ STEAM, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ! \n–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ \
                    (—Å—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –≤–∞–º–∏ –±—É–¥–µ—Ç –ú–ï–ù–¨–®–ï –∏–∑-–∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏):\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ {min_replenishment} —Ä—É–±–ª–µ–π, –º–∞–∫—Å–∏–º—É–º - {max_replenishment}!\n', reply_markup=generator_keyboards(['–û—Ç–º–µ–Ω–∞']))
                await Steam.next()
        
@dp.message_handler(state=Steam.waiting_for_rub)
async def rub(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer(f'–ú–µ–Ω—é:', reply_markup=generator_keyboards(menu_keyboards))
        await state.finish()
    else:
        try:
            rub_people = float(message.text)
        except ValueError:
            await message.answer('‚ö†Ô∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!')
        else:   
            if min_replenishment <= rub_people and rub_people  <= max_replenishment:
                billId = main_func.generator_billId()   
                await state.update_data(rub = message.text)
                await state.update_data(billId = billId)
                await state.update_data(id_user = message.from_user.id)
                rub = float(message.text)
                price_withcomision = rub + (rub * percent)
                link = f'https://oplata.qiwi.com/create?publicKey={main_func.publick_key}&amount={price_withcomision}&billId={billId}'
                msg = await message.answer(f'–í–∞—à —Å—á—ë—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ {price_withcomision}—Ä—É–±.:', reply_markup=payment_process(link))
                await state.update_data(msg = msg)
                await Steam.next()   
            else:
                await message.answer(f'‚ö†Ô∏è–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ {min_replenishment} –∏ –Ω–µ –±–æ–ª—å—à–µ {max_replenishment} —Ä—É–±–ª–µ–π!')
        
@dp.callback_query_handler(text="btn2", state=Steam.waiting_for_pay)
@dp.callback_query_handler(text="btn3", state=Steam.waiting_for_pay)
async def pay_steam_good(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    billId = user_data['billId']
    msg = user_data['msg']
    if callback.data == 'btn3':
        await msg.edit_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        await msg.answer("–ú–µ–Ω—é:", reply_markup=generator_keyboards(menu_keyboards))
        await state.finish()
    elif callback.data == 'btn2':
        status = main_func.check_P2P(main_func.secret_key, billId)
        if status in ['WAITING', 'REJECTED', 'EXPIRED'] or status == None:
            await callback.message.answer('–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à—ë–ª!')
        elif status == 'PAID':
            await msg.edit_text('–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!')
            rub = float(user_data['rub'])
            loginsteam = user_data['login']
            msg = await callback.message.answer("–°—á–∏—Ç–∞—é –≤–∞—à–∏ –¥–µ–Ω—é–∂–∫–∏...")
            money = round((main_func.curse(main_func.token, '643' , '398')) * rub, 2)
            main_func.convert_to_tenge(main_func.token, money, telephone)
            await msg.edit_text("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ steam...")
            main_func.start_steam(loginsteam, str(money))
            await msg.edit_text("‚úÖ–ì–æ—Ç–æ–≤–æ")
            id = str(user_data['id_user'])
            login = user_data['login']
            data_baz.sum_update(id, user_data['rub'])
            if data_baz.chek(id=id, param='login_steam')[0] != login:
                await callback.message.answer('–ó–∞–ø–æ–º–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π ?', reply_markup=save_selection())
                await Steam.next()
            else:
                await callback.message.answer('–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!', reply_markup=generator_keyboards(menu_keyboards))
                await state.finish()

@dp.callback_query_handler(text="Yes_Save", state=Steam.waiting_for_save)
@dp.callback_query_handler(text="NO_Save", state=Steam.waiting_for_save)
async def save_login_steam(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'Yes_Save':
        user_data = await state.get_data()
        id = user_data['id_user']
        login = user_data['login']
        data_baz.update_login(id=id, login=login)
        await callback.message.answer('–õ–æ–≥–∏–Ω –∑–∞–ø–æ–º–Ω–∏–ª!', reply_markup=generator_keyboards(menu_keyboards))
        await state.finish()
    if callback.data == 'NO_Save':
        await callback.message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!', reply_markup=generator_keyboards(menu_keyboards))
        await state.finish()

if __name__ == '__main__':
    data_baz = db.DataBase()
    executor.start_polling(dp)